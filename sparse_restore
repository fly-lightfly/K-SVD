# -*- coding: utf-8 -*-
"""
Created on Sun Nov 23 17:47:58 2014

@author: N daisuke
"""

from PIL import Image
from PIL import ImageOps
import numpy as np
from time import time
from sklearn.decomposition import SparseCoder
from wavelet_trans import haar_mat
dic_path = "C:/Users/N daisuke/Desktop/python.gazou/data3hyper/hyper20141219/imfiles2/"
filepath = "C:/Users/N daisuke/Desktop/python.gazou/data3hyper/hyper20141219/imfiles2/"
filename = "band73natural_im.png"

#グレースケールの配列をRGBに変換
def GrayArray2RGB(gray_array):
    gray_shape = gray_array.shape
    rgb_data = np.zeros((gray_shape[0], gray_shape[1], 3), dtype=gray_array.dtype)
    for c in range(3):
        rgb_data[:,:,c] = gray_array[:,:,0]
    return rgb_data

lena = Image.open(filepath + filename).convert("L")
lena = np.asarray(lena)
height, width = lena.shape
#復元する画像
src_file = filepath + filename
#保存する画像
dst_file = filepath + 'restore.png'

#画像パッチのサイズ(以下pngとnpyの場合で異なる。総じて上がpng,下がnpyバージョン)
patch_size = (64,64)
#patch_size = np.zeros((8,8))

#作成した辞書をロード
#V = np.load(dic_path)
V = haar_mat(64)

#画像を読み込み(pngとnpyの場合で異なる)
im = Image.open(src_file)
#im_np = np.load(src_file)
    
#グレースケール変換(npyの場合は必要ない)
#gray_im = ImageOps.grayscale(im)
#gray_im = im_np

#出力画像を初期化'(pngとnpyで異なる)
dst_array = np.zeros( (gray_im.size[1], gray_im.size[0]) ) #pngバージョン
#dst_array = np.zeros((size(gray_im,axis = 1), size(gray_im,axis = 0)))

#画像をpatch_sizeで分割して処理(pngとnpyで異なる)
w = gray_im.size[0] - patch_size[0]
h = gray_im.size[1] - patch_size[1]
#w = size(gray_im,axis = 0) - size(patch_size, axis = 0)
#h = size(gray_im,axis = 1) - size(patch_size, axis = 1)
y = 0
while y <= h:
    x = 0
    while x <= w:
        
        #パッチサイズの領域を切り取り(npyでは必要ない)
        box = (x,y,x+patch_size[0],y+patch_size[1])
        crop_im = gray_im.crop(box)
        
        #arrayに格納(pngとnpyで異なる)
        data = np.asarray(crop_im,dtype=np.uint8)
        data = data.reshape(1,data.size)
        #data = gray_im[x:x+size(patch_size, axis = 0),y:y+size(patch_size, axis = 0)].reshape(1,size(patch_size))

        #Sparse Coding
        coder = SparseCoder(dic
    y+=patch_size[1]
    #y+=size(patch_size, axis = 1)

#再構成した画像を保存(最初がpngの場合)
#再構成した画像を保存(最初がnpyの場合)

#dst_array = dst_array.reshape(size(gray_im,axis = 1),size(gray_im,axis = 0), 1)
#im = Image.fromarray(np.uint8(dst_array))
plt.imshow(dst_array.T,cmap = 'Greys')
show()
#np.save(dst_file, 'PNG')
#print 'save image as ' + dst_file
dst_array = dst_array.reshape(gray_im.size[1],gray_im.size[0], 1)
rgb_data = GrayArray2RGB(dst_array)
im = Image.fromarray(np.uint8(rgb_data))
im.save(dst_file, 'PNG')
print 'save image as ' + dst_file

#再構成した画像を保存(最初がnpyの場合)

#dst_array = dst_array.reshape(size(gray_im,axis = 1),size(gray_im,axis = 0), 1)
#im = Image.fromarray(np.uint8(dst_array))
plt.imshow(dst_array.T,cmap = 'Greys')
show()
#np.save(dst_file, 'PNG')
#print 'save image as ' + dst_filetionary=V, transform_algorithm='omp', transform_n_nonzero_coefs=10)
        u = coder.transform(data)
        
        #信号を復元
        s = np.dot(u, V)
        
        #復元した画像をコピー(pngとnpyで異なる)
        s = s.reshape(patch_size[1],patch_size[0])
        dst_array[y:y+patch_size[1], x:x+patch_size[0]] = s
              
#        s = s.reshape(size(patch_size, axis = 1),size(patch_size, axis = 0))
#        dst_array[y:y+size(patch_size, axis = 1), x:x+size(patch_size, axis = 0)] = s
        
        #x更新(pngとnpyで異なる)
        x+=patch_size[0]
        #x+=size(patch_size, axis = 0)
    #y更新(pngとnpyで異なる)
    y+=patch_size[1]
    #y+=size(patch_size, axis = 1)

#再構成した画像を保存(最初がpngの場合)
#再構成した画像を保存(最初がnpyの場合)

#dst_array = dst_array.reshape(size(gray_im,axis = 1),size(gray_im,axis = 0), 1)
#im = Image.fromarray(np.uint8(dst_array))
plt.imshow(dst_array.T,cmap = 'Greys')
show()
#np.save(dst_file, 'PNG')
#print 'save image as ' + dst_file
dst_array = dst_array.reshape(gray_im.size[1],gray_im.size[0], 1)
rgb_data = GrayArray2RGB(dst_array)
im = Image.fromarray(np.uint8(rgb_data))
im.save(dst_file, 'PNG')
print 'save image as ' + dst_file

#再構成した画像を保存(最初がnpyの場合)

#dst_array = dst_array.reshape(size(gray_im,axis = 1),size(gray_im,axis = 0), 1)
#im = Image.fromarray(np.uint8(dst_array))
plt.imshow(dst_array.T,cmap = 'Greys')
show()
#np.save(dst_file, 'PNG')
#print 'save image as ' + dst_file
